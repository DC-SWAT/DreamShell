# Sega Dreamcast Toolchains Maker (dc-chain)
# This file is part of KallistiOS.

#########################
### TOOLCHAIN PROFILE ###
#########################

# One of the supported platforms:
# - dreamcast:    Build a toolchain for the SEGA Dreamcast
# - aica:         Build a toolchain for the Dreamcast's AICA co-processor
# - gamecube:     Build a toolchain for the Nintendo GameCube
platform=dreamcast

# Choose a toolchain profile from the following available options:
# Release toolchains:
# - 9.5.0-winxp:  Legacy: Most recent versions of tools which run on Windows XP.
# - stable:       Stable: Well-tested; based on GCC 13.2.0, released 2023-07-27.
# - 13.4.0:       Testing: Latest release in the GCC 13 series, released 2025-06-05.
# - 14.3.0:       Testing: Latest release in the GCC 14 series, released 2025-05-23.
# - 15.2.0:       Testing: Latest release in the GCC 15 series, released 2025-08-08.
# Development toolchains:
# - 13.4.1-dev    Bleeding edge GCC 13 series from git.
# - 14.3.1-dev    Bleeding edge GCC 14 series from git.
# - 15.0.0-lra    GCC 15 branch containing experimental SuperH fixes for LRA.
# - 15.2.1-dev    Bleeding edge GCC 15 series from git.
# - 16.0.0-dev    Bleeding edge GCC 16 series from git.
# If unsure, select stable. See README.md for more detailed descriptions.
toolchain_profile=15.2.0

########################
### DOWNLOAD OPTIONS ###
########################

### Download protocol (http|https|ftp)
# Specify the protocol you want to use for downloading package files.
download_protocol=https

### Force downloader (curl|wget)
# Specify here if you'd prefer to use 'wget' or 'curl'. If neither is specified,
# a web downloader tool will be auto-detected in the following order: cURL, Wget
# You must have either Wget or cURL installed to use dc-chain.
#force_downloader=wget

### Specify GNU mirror override
# The default mirror for GNU sources is 'ftpmirror.gnu.org'
# This setting overrides the default mirror with a preferred mirror.
#gnu_mirror=mirrors.kernel.org

#####################
### BUILD OPTIONS ###
#####################

### Toolchains install path
# Specify the directory where the toolchain will be installed. This setting
# must match the KOS_CC_BASE setting in your KOS "environ.sh" configuration.
toolchain_path=/opt/toolchains/dc/sh-elf

### Make jobs (n|<empty>)
# Set this value to the number of parallel jobs you want to run with make.
# Leave it empty to use a number of parallel jobs that corresponds to the
# number of CPU threads available.
# Using multiple jobs may cause issues in certain environments and may be
# automatically disabled. If you encounter errors building your toolchain,
# reduce the number of jobs to 1 to avoid issues and ease troubleshooting.
makejobs=

### Verbose (1|0)
# Choose whether to actively display compilation messages on the screen.
# Messages are saved to the build log files regardless of this setting.
verbose=0

### Erase (1|0)
# Erase build directories as toolchain components are installed to save space.
erase=1

### Install toolchain debug symbols (1|0)
# Choose whether to keep the debugging symbols for the toolchain.
# This is only useful if you wish to debug the toolchain itself.
#toolchain_debug=1

########################
### LANGUAGE OPTIONS ###
########################

### Enable C++
# Builds C++ support, including the C++ compiler and its standard library. The
# vast majority of language features are supported, with C++23 and early C++26
# support included. KallistiOS provides several examples with C++ support, so it
# is enabled by default. Adding C++ support requires extra disk space and
# compilation time, so you may disable it here if you do not plan on using C++.
enable_cpp=1

### Enable Objective-C
# Builds Objective-C support. Currently, this builds the Obj-C compiler and
# runtime, but does not build a standard library. The GNUStep Base Library is
# currently in active development for future inclusion in the kos-ports library.
# KallistiOS provides examples with Obj-C support, so it is enabled by default.
enable_objc=1

### Enable Objective C++
# Builds Objective C++ support. This hybrid language allows both C++ and Obj-C
# methods to be called from both contexts. Enabled by default as both the C++
# and Obj-C languages are already enabled by default.
enable_objcpp=1

### Enable D
# Builds D support. This will build the D compiler, but does not build the
# Phobos Runtime Library. D support may only be enabled on POSIX platforms which
# have its external dependencies provided through a host DMD, GDC, or LDC
# compiler installation.
#enable_d=1

### Enable Ada
# Builds Ada support. This will build the GNAT Ada compiler and tools but does
# not build the libada runtime library. In order for this build to succeed, the
# host's GCC version must match the target Dreamcast version, plus the same
# version of GNAT and its tools must be preinstalled (and in your path).
#enable_ada=1

### Enable Rust
# Builds the work-in-progress GCCRS Rust compiler frontend for GCC.
# Requires a development version of GCC.
#enable_rust=1

### Enable libgccjit
# Enables the libgccjit just-in-time embeddable GCC library. This can also be
# used to generate code ahead of time, e.g. with rustc_codegen_gcc project.
#enable_libgccjit=1

###################
### GCC OPTIONS ###
###################

### Floating-point precision support (m4-single|m4-single-only|m4|m4-nofpu)
# Build support for various SH4 floating-point operation ABIs. KallistiOS
# supports both the single-precision-default ABI (m4-single) and the
# single-precision-only ABI (m4-single-only). When using m4-single, the SH4 will
# be in single-precision mode upon function entry but will switch to double-
# precision mode if 64-bit doubles are used. When using m4-single-only, the SH4
# will always be in single-precision mode and 64-bit doubles will be truncated to
# 32-bit floats. In double-precision mode (m4), which is unsupported by
# KallistiOS, the SH4 will be in double precision mode upon function entry.
# Finally in no fpu mode (m4-nofpu), which is also unsupported by KallistiOS and
# objc/++, there is no support for floating-point operations at all.
# Historically, m4-single-only was used in both official and homebrew Dreamcast
# software, but m4-single is the default as of KOS 2.2.0 to increase
# compatibility with newer libraries which require 64-bit doubles.
precision_modes=m4-single,m4-single-only

### Default floating-point mode (m4-single|m4-single-only|m4|m4-nofpu)
# Choose the default floating-point precision ABI used when GCC is invoked. This
# may be overridden by passing -m4-single, -m4-single-only, or -m4 to GCC.
default_precision=m4-single

### GCC threading model (single|kos)
# KallistiOS patches to GCC provide a 'kos' thread model, which should be used.
# If you want to disable threading support for C++, Objective-C, and so forth,
# you can set this option to 'single'.
thread_model=kos

### Automatic patching for KallistiOS (1|0)
# Uncomment this option if you want to disable applying KallistiOS patches to
# toolchain source files before building. This will disable usage of the 'kos'
# thread model. Only do this if you understand what you are doing.
#use_kos_patches=0

### Disable GCC Native Language Support (1|0)
# By default, NLS allows GCC to output diagnostics in non-English languages.
# Uncomment this option to disable NLS and force GCC to output in English.
#disable_nls=1

######################
### NEWLIB OPTIONS ###
######################

### Automatic patching for Newlib (1|0)
# Uncomment this option if you want to disable the automatic patching of Newlib
# needed by KallistiOS. This will keep the generated toolchain completely raw.
# This will also disable the 'kos' thread model. Only do this if you understand
# what you are doing.
#auto_fixup_sh4_newlib=0

### C99 format specifier support (1|0)
# Define this to build Newlib with additional support for the C99 format
# specifiers, used by printf and friends. These include support for size_t,
# ptrdiff_t, intmax_t, and sized integral types.
newlib_c99_formats=1

### Multibyte character set support (1|0)
# Define this to build Newlib with additional multibyte support. This enables
# three special locales: "C-JIS", "C-SJIS", and "C-EUCJP". The multibyte
# support extends to the mb and wc functions in stdlib as well as format
# characters for the printf and scanf family of routines.
#newlib_multibyte=1

### iconv() character encoding conversions support (encoding list)
# Define a list here to enable support for the iconv() function and <iconv.h>
# header file. The given comma separated list defines for which encoding types
# to include bidirectional conversion support. For the full list of available
# encodings, see the Newlib configuration documentation.
#newlib_iconv_encodings=us_ascii,utf8,utf16,ucs_2_internal,ucs_4_internal

### Optimize Newlib for space (1|0)
# Uncomment this option to optimize for space when building Newlib. This will
# build Newlib with compiler flags which favor smaller code sizes over faster
# performance.
#newlib_opt_space=1

###################
### C++ OPTIONS ###
###################

### Timezone database support (1|0|path)
# Uncomment this option to enable building support for C++'s std::chrono::tzdb
# into your C++ standard library by using a combination of the system's local
# timezone DB and one dynamically fetched from the "IANA Time Zone Database."
# Without support enabled, only the "UTC" and "GMT" timezones will be defined.
# You can optionally provide the path to a directory with a custom "tzdata.zi"
# database file. NOTE: Enabling this will result in larger C++ binaries!
#libstdcxx_tzdb=1

#######################
### WINDOWS OPTIONS ###
#######################

### MinGW/MSYS
# Standalone binaries (1|0)
# Uncomment this option if you want static binaries that are standalone and
# require no dependencies. When this option is used, binaries can be run outside
# the MinGW/MSYS environment. This is NOT recommended; only do this if you know
# what you are doing.
#standalone_binary=1

### Force installation of BFD for SH (1|0)
# Uncomment this option if you want to force installation of 'libbfd' for the SH
# toolchain. This is required for MinGW/MSYS and can't be disabled in this
# scenario. This option is here mainly if you want to force the installation of
# 'libbfd' under other environments, but this won't be necessary in most cases,
# as 'libelf' is used almost everywhere. Please note, 'libbfd' is not portable
# if you built it on another environment. Only use this flag if you understand
# what you are doing.
#sh_force_libbfd_installation=1
